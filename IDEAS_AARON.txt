#!/bin/bash

# Verifica que se haya proporcionado un archivo YAML de entrada como argumento
if [ $# -eq 0 ]; then
    echo "Uso: $0 archivo_de_entrada.yml"
    exit 1
fi

input_file="$1"

# Verifica que el archivo de entrada exista
if [ ! -f "$input_file" ]; then
    echo "Error: El archivo $input_file no existe."
    exit 1
fi

# Función para extraer datos de jobs y generar archivos YAML de salida
generate_yaml_files() {
    local job_data="$1"
    local project="$2"
    local timestamp="$3"
    
    # Lee cada job del bloque jobs
    while read -r line; do
        job_name=$(echo "$line" | grep -Po '(?<=name: ).*')
        version=$(echo "$line" | grep -Po '(?<=version: ).*')
        jira_id=$(echo "$line" | grep -Po '(?<=jira_id: ).*')
        
        # Genera el nombre del archivo de salida
        output_file="${job_name}_${timestamp}.yml"
        
        # Crea el contenido del archivo YAML de salida
        cat <<EOF > "$output_file"
project_name: $project
job_name: $job_name
fid: $jira_id
version: $version
EOF
        
        echo "Archivo generado: $output_file"
    done <<< "$job_data"
}

# Extrae el bloque 'jobs' del archivo YAML de entrada
jobs_block=$(sed -n '/^ *jobs:/,/^ *$/p' "$input_file" | sed '1d;$d')

# Extrae el proyecto y el timestamp del archivo YAML de entrada
project=$(grep -Po '(?<=project: ).*' "$input_file")
timestamp=$(grep -Po '(?<=timestamp: ).*' "$input_file")

# Llama a la función para generar los archivos YAML de salida
generate_yaml_files "$jobs_block" "$project" "$timestamp"
